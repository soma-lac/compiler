options {
  JDK_VERSION = "1.5";
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(Calc)

import java.io.*;
public class Calc
{
  	private Env env = new Env();
    public static void main(String args [])
    {
      
        try {
            if (args.length == 0)
                new Calc(System.in).interactive();    // 対話モードへ
            else {
                Reader reader = new BufferedReader(new FileReader(new File(args[0])));
                Calc calc = new Calc(reader);
                calc.eval();
            }
        } catch (ParseException e) {
            System.err.println(e);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void interactive() throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        while (true) {
            System.out.print("> ");
            String input = "";
            while (true) { 
                String line = reader.readLine();
                if (line == null) return;
                input += line;
                if (line.length() == 0 || input.charAt(input.length() - 1) != '\\') 
                    break;
                input = input.substring(0, input.length() - 1);
	    }
            try {
                ReInit(new StringReader(input));
                eval();
            } catch (ParseException e) {
                System.err.println(e);
            }
        }
    }	
}

PARSER_END(Calc)

SKIP : { < [" ", "\r", "\t", "\n"] > }

TOKEN : {
  < INTEGER: (["0"-"9"])+ >
| < IDENTIFIER:["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])*		>
}

void eval() :
{
   Node root;
}
{
    root = expr()
    { System.out.println("tree: " + root);
		System.out.println("=> " + root.eval(env));
    } <EOF>
}

Node expr() :
{
  Token t;
  NameNode n;
  Node x;
}
{
   LOOKAHEAD(2) n = name() t = "=" x = expr()
   { return new AssignNode(t.beginLine, n, x);}
 	| x = orExpr() { return x; }
}

Node orExpr():
{
  Node x,y;
  Token t;
}
{
  x = andExpr()(t = "||" y = andExpr() {x = new BinExprNode(t.beginLine,x,t.image,y); } )*
  	{
    return x;
	}
}

Node andExpr():
{
  Node x,y;
  Token t;
}
{
  x = compExpr()(t = "&&" y = compExpr() {x = new BinExprNode(t.beginLine,x,t.image,y);} )*
  {
    return x;
  }
}

Node compExpr():
{
  Node x,y;
  Token t;
}
{
  x = numExpr()
  [
  	( t= ">" |t = "< " | t = ">=" | t = "<=" | t = "==" | t = "!=")
  	 y = numExpr()
  	 { x = new BinExprNode(t.beginLine,x,t.image,y); }
  ]
  {
    return x;
}

}

Node numExpr():
{
  	Token t;
	Node x,y;
}
{
	x = term()
    (
      (t = "+" y = term() | t = "-" y = term())
   		{ x = new BinExprNode(t.beginLine,x,t.image,y);}
    )*
    { return x ; }
}

Node term()	:
{
  Node x, y;
  Token t;
}
{
  	x = factor()
  	(  	  (t = "*" y = factor() | t = "/" y = factor())
  	  { x = new BinExprNode(t.beginLine,x,t.image,y); }
    )*
  { return x; }
}

Node factor()	:
{  Node x;
  Token t;
}
{
  
	t = "(" x = expr() ")" { return x; }|
	 t = "-" x = factor() { return new NegExprNode(t.beginLine,Integer.parseInt(t.image),t.image); }
	|t = "+" x = factor() { return new PosExprNode(t.beginLine,Integer.parseInt(t.image),t.image); }
}

//Node element():
//{
//  Node x;
//  NameNode str;
//}
//{
//	x = number() { return x; }
//	|str = name() {
//	  if(env.containsKey(str))
//	  	return env.get(str);
//	  else
//	  	throw new ParseException(str + "is not defined");
//	}
//}

NumberNode number()	:
{
 	Token t; 
}
	{
	t = <INTEGER>
		{return new NumberNode(t.beginLine,Integer.parseInt(t.image));}
  	 }

NameNode name():
{
  	Token t;
}
{
	t = < IDENTIFIER >
		{ return new NameNode(t.beginLine,t.image); }
}